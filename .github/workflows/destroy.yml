name: Destroy Infrastructure
# Manual workflow for destroying infrastructure

on:
  push:
    branches: [ develop ]
    paths: [ '.github/workflows/destroy.yml' ]
  workflow_dispatch:  # Manual trigger only
    inputs:
      confirm_destroy:
        description: '‚ö†Ô∏è  WARNING: This will destroy ALL infrastructure! Type DESTROY to confirm'
        required: true
        default: 'NO'
        type: string
      preserve_ips:
        description: 'Preserve static IP addresses (recommended)'
        required: true
        default: true
        type: boolean

jobs:
  destroy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Confirm destruction
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          echo "‚ÑπÔ∏è  Push trigger detected - running in CHECK mode only"
          echo "CHECK_MODE=true" >> $GITHUB_ENV
        elif [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
          echo "‚ùå Destruction not confirmed. Please type 'DESTROY' to proceed."
          exit 1
        else
          echo "‚ö†Ô∏è  DESTRUCTION CONFIRMED - This will destroy ALL infrastructure!"
          echo "üìã Preserve static IPs: ${{ github.event.inputs.preserve_ips }}"
          echo "CHECK_MODE=false" >> $GITHUB_ENV
        fi
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true
        
    - name: Authenticate to Google Cloud
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
        gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: Check existing infrastructure
      run: |
        cd infrastructure
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
        echo "üîç Checking for existing infrastructure..."
        
        # Check if instances exist
        if gcloud compute instances describe web1-prod --zone=europe-west1-b --quiet 2>/dev/null; then
          echo "‚úÖ Infrastructure found - proceeding with destruction"
          echo "INFRA_EXISTS=true" >> $GITHUB_ENV
        else
          echo "‚ö†Ô∏è  No infrastructure found - nothing to destroy"
          echo "INFRA_EXISTS=false" >> $GITHUB_ENV
        fi
        
    - name: Import existing resources
      if: env.INFRA_EXISTS == 'true'
      run: |
        cd infrastructure
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
        echo "üîÑ Importing existing resources into Terraform state..."
        
        # Import static IPs if they exist
        if gcloud compute addresses describe web1-static-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
          terraform import google_compute_address.web1_static_ip projects/${{ secrets.GCP_PROJECT_ID }}/regions/europe-west1/addresses/web1-static-ip-prod || true
        fi
        
        if gcloud compute addresses describe web2-static-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
          terraform import google_compute_address.web2_static_ip projects/${{ secrets.GCP_PROJECT_ID }}/regions/europe-west1/addresses/web2-static-ip-prod || true
        fi
        
        if gcloud compute addresses describe haproxy-static-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
          terraform import google_compute_address.haproxy_static_ip projects/${{ secrets.GCP_PROJECT_ID }}/regions/europe-west1/addresses/haproxy-static-ip-prod || true
        fi
        
        # Import internal IPs if they exist
        if gcloud compute addresses describe web1-internal-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
          terraform import google_compute_address.web1_internal_ip projects/${{ secrets.GCP_PROJECT_ID }}/regions/europe-west1/addresses/web1-internal-ip-prod || true
        fi
        
        if gcloud compute addresses describe web2-internal-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
          terraform import google_compute_address.web2_internal_ip projects/${{ secrets.GCP_PROJECT_ID }}/regions/europe-west1/addresses/web2-internal-ip-prod || true
        fi
        
        if gcloud compute addresses describe haproxy-internal-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
          terraform import google_compute_address.haproxy_internal_ip projects/${{ secrets.GCP_PROJECT_ID }}/regions/europe-west1/addresses/haproxy-internal-ip-prod || true
        fi
        
        # Import instances if they exist
        if gcloud compute instances describe web1-prod --zone=europe-west1-b --quiet 2>/dev/null; then
          terraform import google_compute_instance.web1 projects/${{ secrets.GCP_PROJECT_ID }}/zones/europe-west1-b/instances/web1-prod || true
        fi
        
        if gcloud compute instances describe web2-prod --zone=europe-west1-b --quiet 2>/dev/null; then
          terraform import google_compute_instance.web2 projects/${{ secrets.GCP_PROJECT_ID }}/zones/europe-west1-b/instances/web2-prod || true
        fi
        
        if gcloud compute instances describe haproxy-prod --zone=europe-west1-b --quiet 2>/dev/null; then
          terraform import google_compute_instance.haproxy projects/${{ secrets.GCP_PROJECT_ID }}/zones/europe-west1-b/instances/haproxy-prod || true
        fi
        
        echo "‚úÖ Existing resources imported successfully"
        
    - name: Initialize Terraform
      if: env.INFRA_EXISTS == 'true'
      run: |
        cd infrastructure
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
        terraform init -upgrade
        
    - name: Destroy infrastructure
      if: env.INFRA_EXISTS == 'true' && env.CHECK_MODE != 'true'
      run: |
        cd infrastructure
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
        echo "üí• Destroying infrastructure (preserving static IPs & images)..."
        echo "‚è±Ô∏è This will take ~30 seconds..."
        
        START_TIME=$(date +%s)
        terraform destroy -auto-approve \
          -target=google_compute_instance.haproxy \
          -target=google_compute_instance.web1 \
          -target=google_compute_instance.web2 \
          -target=google_compute_firewall.allow_http \
          -target=google_compute_firewall.allow_https \
          -target=google_compute_firewall.allow_ssh \
          -target=google_compute_firewall.allow_haproxy_lb \
          -target=google_compute_firewall.allow_haproxy_web1 \
          -target=google_compute_firewall.allow_haproxy_web2 \
          -target=google_compute_firewall.allow_haproxy_stats \
          -target=google_compute_firewall.allow_haproxy_stats_page || true
        END_TIME=$(date +%s)
        DESTROY_TIME=$((END_TIME - START_TIME))
        
        echo "‚è±Ô∏è Total destroy time: ${DESTROY_TIME} seconds"
        
    - name: Check mode - Skip destruction
      if: env.CHECK_MODE == 'true'
      run: |
        echo "‚ÑπÔ∏è  CHECK MODE: Skipping actual destruction"
        echo "   This run was triggered by push to register workflow in UI"
        echo "   Use manual trigger with 'DESTROY' confirmation for real destruction"
        
    - name: Verify destruction
      run: |
        echo "üîç Verifying infrastructure destruction..."
        
        # Check if instances still exist
        INSTANCES_DESTROYED=true
        
        for instance in web1-prod web2-prod haproxy-prod; do
          if gcloud compute instances describe $instance --zone=europe-west1-b --quiet 2>/dev/null; then
            echo "‚ùå $instance still exists"
            INSTANCES_DESTROYED=false
          else
            echo "‚úÖ $instance destroyed"
          fi
        done
        
        if [ "$INSTANCES_DESTROYED" = "true" ]; then
          echo "üéâ All instances destroyed successfully!"
          echo "DESTROY_STATUS=success" >> $GITHUB_ENV
        else
          echo "‚ö†Ô∏è Some instances may still exist"
          echo "DESTROY_STATUS=partial" >> $GITHUB_ENV
        fi
        
    - name: Display destruction results
      run: |
        echo "üéâ Infrastructure destroyed successfully!"
        echo "======================================="
        echo ""
        
        if [ "$INFRA_EXISTS" = "false" ]; then
          echo "‚ÑπÔ∏è  No infrastructure was found to destroy"
          echo "   Nothing to do - infrastructure was already clean"
        elif [ "$DESTROY_STATUS" = "success" ]; then
          echo "‚úÖ DESTRUCTION STATUS: SUCCESS"
          echo "   All instances and firewall rules destroyed"
          echo "   Static IP addresses preserved (no additional cost)"
          echo "   Custom images preserved (for fast deployment)"
        else
          echo "‚ö†Ô∏è  DESTRUCTION STATUS: PARTIAL"
          echo "   Some resources may still exist"
          echo "   Check the logs above for details"
        fi
        echo ""
        echo "üí∞ Cost Savings:"
        echo "   - All compute instances destroyed"
        echo "   - Static IPs preserved (no additional cost)"
        echo "   - Custom images preserved (for fast deployment)"
        echo "   - Ready for next deployment"
        echo ""
        echo "üñºÔ∏è Preserved images:"
        echo "   - haproxy-prod-image-v3"
        echo "   - web1-prod-image-v3" 
        echo "   - web2-prod-image-v3"
        echo ""
        echo "üöÄ Next deployment will be ultra-fast using preserved images!"
        echo ""
        echo "üîÑ To redeploy infrastructure:"
        echo "   - Go to Actions tab"
        echo "   - Run 'Deploy Infrastructure' workflow"
