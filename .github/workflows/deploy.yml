name: Deploy Infrastructure

on:
  workflow_dispatch:  # Manual trigger only
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - staging
      confirm_deploy:
        description: 'Confirm deployment (type YES to proceed)'
        required: true
        default: 'NO'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Confirm deployment
      run: |
        if [ "${{ github.event.inputs.confirm_deploy }}" != "YES" ]; then
          echo "❌ Deployment not confirmed. Please type 'YES' to proceed."
          exit 1
        fi
        echo "✅ Deployment confirmed for environment: ${{ github.event.inputs.environment }}"
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true
        
    - name: Authenticate to Google Cloud
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
        gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: Initialize Terraform
      run: |
        cd infrastructure
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
        terraform init -upgrade
        
    - name: Check existing infrastructure
      run: |
        cd infrastructure
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
        echo "🔍 Checking for existing infrastructure..."
        
        # Check if any resources exist (instances or IPs)
        INFRA_EXISTS=false
        
        # Check instances
        if gcloud compute instances describe web1-prod --zone=europe-west1-b --quiet 2>/dev/null; then
          echo "✅ Instances exist"
          INFRA_EXISTS=true
        fi
        
        # Check static IPs
        if gcloud compute addresses describe web1-static-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
          echo "✅ Static IPs exist"
          INFRA_EXISTS=true
        fi
        
        # Check internal IPs
        if gcloud compute addresses describe web1-internal-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
          echo "✅ Internal IPs exist"
          INFRA_EXISTS=true
        fi
        
        if [ "$INFRA_EXISTS" = "true" ]; then
          echo "✅ Infrastructure already exists"
          echo "EXISTING_INFRA=true" >> $GITHUB_ENV
        else
          echo "🆕 No existing infrastructure found"
          echo "EXISTING_INFRA=false" >> $GITHUB_ENV
        fi
        
    - name: Import existing resources or Apply new
      run: |
        cd infrastructure
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
        if [ "$EXISTING_INFRA" = "true" ]; then
          echo "🔄 Importing existing resources into Terraform state..."
          
          # Import static IPs if they exist
          if gcloud compute addresses describe web1-static-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
            terraform import google_compute_address.web1_static_ip projects/${{ secrets.GCP_PROJECT_ID }}/regions/europe-west1/addresses/web1-static-ip-prod || true
          fi
          
          if gcloud compute addresses describe web2-static-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
            terraform import google_compute_address.web2_static_ip projects/${{ secrets.GCP_PROJECT_ID }}/regions/europe-west1/addresses/web2-static-ip-prod || true
          fi
          
          if gcloud compute addresses describe haproxy-static-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
            terraform import google_compute_address.haproxy_static_ip projects/${{ secrets.GCP_PROJECT_ID }}/regions/europe-west1/addresses/haproxy-static-ip-prod || true
          fi
          
          # Import internal IPs if they exist
          if gcloud compute addresses describe web1-internal-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
            terraform import google_compute_address.web1_internal_ip projects/${{ secrets.GCP_PROJECT_ID }}/regions/europe-west1/addresses/web1-internal-ip-prod || true
          fi
          
          if gcloud compute addresses describe web2-internal-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
            terraform import google_compute_address.web2_internal_ip projects/${{ secrets.GCP_PROJECT_ID }}/regions/europe-west1/addresses/web2-internal-ip-prod || true
          fi
          
          if gcloud compute addresses describe haproxy-internal-ip-prod --region=europe-west1 --quiet 2>/dev/null; then
            terraform import google_compute_address.haproxy_internal_ip projects/${{ secrets.GCP_PROJECT_ID }}/regions/europe-west1/addresses/haproxy-internal-ip-prod || true
          fi
          
          # Import firewall rules if they exist
          if gcloud compute firewall-rules describe allow-ssh-prod --quiet 2>/dev/null; then
            terraform import google_compute_firewall.allow_ssh projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-ssh-prod || true
          fi
          
          if gcloud compute firewall-rules describe allow-http-prod --quiet 2>/dev/null; then
            terraform import google_compute_firewall.allow_http projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-http-prod || true
          fi
          
          if gcloud compute firewall-rules describe allow-https-prod --quiet 2>/dev/null; then
            terraform import google_compute_firewall.allow_https projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-https-prod || true
          fi
          
          if gcloud compute firewall-rules describe allow-haproxy-lb-prod --quiet 2>/dev/null; then
            terraform import google_compute_firewall.allow_haproxy_lb projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-haproxy-lb-prod || true
          fi
          
          if gcloud compute firewall-rules describe allow-haproxy-web1-prod --quiet 2>/dev/null; then
            terraform import google_compute_firewall.allow_haproxy_web1 projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-haproxy-web1-prod || true
          fi
          
          if gcloud compute firewall-rules describe allow-haproxy-web2-prod --quiet 2>/dev/null; then
            terraform import google_compute_firewall.allow_haproxy_web2 projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-haproxy-web2-prod || true
          fi
          
          if gcloud compute firewall-rules describe allow-haproxy-stats-prod --quiet 2>/dev/null; then
            terraform import google_compute_firewall.allow_haproxy_stats projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-haproxy-stats-prod || true
          fi
          
          if gcloud compute firewall-rules describe allow-haproxy-stats-page-prod --quiet 2>/dev/null; then
            terraform import google_compute_firewall.allow_haproxy_stats_page projects/${{ secrets.GCP_PROJECT_ID }}/global/firewalls/allow-haproxy-stats-page-prod || true
          fi
          
          # Import instances if they exist
          if gcloud compute instances describe web1-prod --zone=europe-west1-b --quiet 2>/dev/null; then
            terraform import google_compute_instance.web1 projects/${{ secrets.GCP_PROJECT_ID }}/zones/europe-west1-b/instances/web1-prod || true
          fi
          
          if gcloud compute instances describe web2-prod --zone=europe-west1-b --quiet 2>/dev/null; then
            terraform import google_compute_instance.web2 projects/${{ secrets.GCP_PROJECT_ID }}/zones/europe-west1-b/instances/web2-prod || true
          fi
          
          if gcloud compute instances describe haproxy-prod --zone=europe-west1-b --quiet 2>/dev/null; then
            terraform import google_compute_instance.haproxy projects/${{ secrets.GCP_PROJECT_ID }}/zones/europe-west1-b/instances/haproxy-prod || true
          fi
          
          echo "✅ Existing resources imported successfully"
          
          # Apply any changes after import
          echo "🔄 Applying any changes after import..."
          terraform apply -auto-approve
        else
          echo "🆕 Applying new infrastructure..."
          terraform apply -auto-approve
        fi
        
    - name: Verify infrastructure status
      run: |
        cd infrastructure
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
        echo "🔍 Verifying infrastructure status..."
        
        # Check if all instances are running
        INSTANCES_RUNNING=true
        
        for instance in web1-prod web2-prod haproxy-prod; do
          if ! gcloud compute instances describe $instance --zone=europe-west1-b --format="value(status)" | grep -q "RUNNING"; then
            echo "❌ $instance is not running"
            INSTANCES_RUNNING=false
          else
            echo "✅ $instance is running"
          fi
        done
        
        if [ "$INSTANCES_RUNNING" = "true" ]; then
          echo "🎉 All infrastructure is running successfully!"
          echo "INFRA_STATUS=healthy" >> $GITHUB_ENV
        else
          echo "⚠️ Some instances are not running"
          echo "INFRA_STATUS=unhealthy" >> $GITHUB_ENV
        fi
        
    - name: Wait for instances to be ready
      run: |
        echo "⏳ Waiting for instances to be ready..."
        sleep 30
        
    - name: Apply content from web-apps
      run: |
        echo "🔄 Applying content from web-apps/ directory..."
        
        # Function to update HTML content
        update_html_content() {
            local server_name=$1
            local html_file=$2
            local zone="europe-west1-b"
            
            echo "📝 Updating $server_name HTML content..."
            
            if [ ! -f "web-apps/$html_file" ]; then
                echo "⚠️  web-apps/$html_file not found, skipping $server_name HTML update"
                return
            fi
            
            # Copy file to server
            echo "📤 Uploading $html_file to $server_name..."
            gcloud compute scp "web-apps/$html_file" "$server_name:~/temp.html" --zone="$zone"
            
            # Apply changes on server
            gcloud compute ssh "$server_name" --zone="$zone" --command="
                echo '🔄 Applying HTML changes on $server_name...'
                
                # Backup current content
                sudo cp /var/www/html/index.html /var/www/html/index.html.backup.\$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
                
                # Remove old content
                sudo rm -f /var/www/html/index.html
                sudo rm -f /var/www/html/index.html.*
                
                # Copy new content
                sudo cp ~/temp.html /var/www/html/index.html
                sudo chown root:root /var/www/html/index.html
                sudo chmod 644 /var/www/html/index.html
                
                # Clean up temp file
                rm -f ~/temp.html
                
                # Restart nginx to ensure changes take effect
                sudo systemctl restart nginx
                
                echo '✅ $server_name HTML updated successfully'
            "
        }
        
        # Update web1 HTML
        update_html_content "web1-prod" "web1.html"
        
        # Update web2 HTML  
        update_html_content "web2-prod" "web2.html"
        
        # Update HAProxy dashboard
        update_html_content "haproxy-prod" "haproxy.html"
        
        # Update HAProxy configuration with current IPs
        echo "📝 Updating HAProxy configuration with current IPs..."
        WEB1_INTERNAL_IP="10.132.15.221"
        WEB2_INTERNAL_IP="10.132.15.222"
        
        gcloud compute ssh haproxy-prod --zone=europe-west1-b --command="
            echo '🔄 Updating HAProxy configuration...'
            
            # Backup current config
            sudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup.\$(date +%Y%m%d_%H%M%S)
            
            # Update backend IPs
            sudo sed -i 's/server web1 .*:80/server web1 $WEB1_INTERNAL_IP:80/' /etc/haproxy/haproxy.cfg
            sudo sed -i 's/server web2 .*:80/server web2 $WEB2_INTERNAL_IP:80/' /etc/haproxy/haproxy.cfg
            
            # Test configuration
            if sudo haproxy -c -f /etc/haproxy/haproxy.cfg; then
                sudo systemctl restart haproxy
                echo '✅ HAProxy configuration updated and restarted'
            else
                echo '❌ HAProxy configuration test failed, restoring backup'
                sudo cp /etc/haproxy/haproxy.cfg.backup.* /etc/haproxy/haproxy.cfg
                sudo systemctl restart haproxy
            fi
        "
        
        echo "✅ Content from web-apps/ applied successfully!"
        
    - name: Test deployment
      run: |
        echo "🧪 Testing deployment..."
        
        # Get HAProxy IP
        cd infrastructure
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
        HAPROXY_IP=$(terraform output -raw haproxy_external_ip)
        
        echo "🌐 Testing Load Balancer..."
        LB_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://balancer.svdevops.tech -k || echo "000")
        if [ "$LB_RESPONSE" = "200" ]; then
            echo "✅ Load Balancer working (200)"
            
            # Test load balancing - show web1-web2 alternation (fast)
            echo ""
            echo "🔄 Testing Load Balancing (5 requests):"
            for i in {1..5}; do
                RESPONSE=$(curl -s https://balancer.svdevops.tech -k | grep -o "Web Server [12]" || echo "No response")
                echo "Request $i: $RESPONSE"
                sleep 0.2
            done
            echo "✅ Load balancing test completed!"
        else
            echo "⚠️  Load Balancer not ready yet ($LB_RESPONSE) - may need a few more seconds"
        fi
        
    - name: Display deployment info
      run: |
        echo "🎉 Deployment completed!"
        echo "======================="
        echo ""
        
        if [ "$INFRA_STATUS" = "healthy" ]; then
          echo "✅ INFRASTRUCTURE STATUS: HEALTHY"
          echo "   All instances are running and ready"
        else
          echo "⚠️  INFRASTRUCTURE STATUS: NEEDS ATTENTION"
          echo "   Some instances may not be running"
        fi
        echo ""
        
        echo "🌐 URLs:"
        echo "   Load Balancer: https://balancer.svdevops.tech"
        echo "   Web1: https://web1.svdevops.tech"
        echo "   Web2: https://web2.svdevops.tech"
        echo "   Stats: http://$(cd infrastructure && export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json && terraform output -raw haproxy_external_ip):8080/stats"
        echo ""
        echo "💡 All configurations are preserved from images:"
        echo "   ✅ HAProxy with Let's Encrypt certificates"
        echo "   ✅ Nginx with correct server_name"
        echo "   ✅ Health checks enabled"
        echo "   ✅ Load balancing configured"
        echo "   ✅ Content from web-apps/ applied"
        echo ""
        echo "🔄 Infrastructure Management:"
        echo "   - Existing resources were imported into Terraform state"
        echo "   - No duplicate resources created"
        echo "   - All services are operational"

  remove:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'remove'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Confirm removal
      run: |
        echo "⚠️  REMOVAL CONFIRMED - This will destroy ALL infrastructure!"
        echo "📋 Preserving static IPs and custom images"
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true
        
    - name: Authenticate to Google Cloud
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
        gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV
        
    - name: Check existing infrastructure
      run: |
        echo "🔍 Checking for existing infrastructure..."
        
        # Check if instances exist
        if gcloud compute instances describe web1-prod --zone=europe-west1-b --quiet 2>/dev/null; then
          echo "✅ Infrastructure found - proceeding with destruction"
          echo "INFRA_EXISTS=true" >> $GITHUB_ENV
        else
          echo "⚠️  No infrastructure found - nothing to destroy"
          echo "INFRA_EXISTS=false" >> $GITHUB_ENV
        fi
        
    - name: Initialize Terraform
      if: env.INFRA_EXISTS == 'true'
      run: |
        cd infrastructure
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
        terraform init -upgrade
        
    - name: Remove infrastructure
      if: env.INFRA_EXISTS == 'true'
      run: |
        echo "🗑️ Removing infrastructure (preserving static IPs & images)..."
        echo "⏱️ This will take ~30 seconds..."
        
        START_TIME=$(date +%s)
        DESTROY_ERRORS=0
        
        # Destroy instances directly with gcloud
        echo "🔄 Destroying instances..."
        for instance in web1-prod web2-prod haproxy-prod; do
          if gcloud compute instances describe $instance --zone=europe-west1-b --quiet 2>/dev/null; then
            echo "🗑️ Destroying $instance..."
            if ! gcloud compute instances delete $instance --zone=europe-west1-b --quiet; then
              echo "❌ Failed to destroy $instance"
              DESTROY_ERRORS=$((DESTROY_ERRORS + 1))
            else
              echo "✅ Successfully destroyed $instance"
            fi
          fi
        done
        
        # Destroy firewall rules
        echo "🔄 Destroying firewall rules..."
        for firewall in allow-http-prod allow-https-prod allow-ssh-prod allow-haproxy-lb-prod allow-haproxy-web1-prod allow-haproxy-web2-prod allow-haproxy-stats-prod allow-haproxy-stats-page-prod; do
          if gcloud compute firewall-rules describe $firewall --quiet 2>/dev/null; then
            echo "🗑️ Destroying $firewall..."
            if ! gcloud compute firewall-rules delete $firewall --quiet; then
              echo "❌ Failed to destroy $firewall"
              DESTROY_ERRORS=$((DESTROY_ERRORS + 1))
            else
              echo "✅ Successfully destroyed $firewall"
            fi
          fi
        done
        
        END_TIME=$(date +%s)
        DESTROY_TIME=$((END_TIME - START_TIME))
        
        echo "⏱️ Total destroy time: ${DESTROY_TIME} seconds"
        
        if [ $DESTROY_ERRORS -gt 0 ]; then
          echo "❌ Remove completed with $DESTROY_ERRORS errors"
          echo "DESTROY_ERRORS=$DESTROY_ERRORS" >> $GITHUB_ENV
        else
          echo "✅ Remove completed successfully"
          echo "DESTROY_ERRORS=0" >> $GITHUB_ENV
        fi
        
    - name: Verify removal
      run: |
        echo "🔍 Verifying infrastructure removal..."
        
        # Check if instances still exist
        INSTANCES_DESTROYED=true
        FAILED_INSTANCES=""
        
        for instance in web1-prod web2-prod haproxy-prod; do
          if gcloud compute instances describe $instance --zone=europe-west1-b --quiet 2>/dev/null; then
            echo "❌ $instance still exists"
            INSTANCES_DESTROYED=false
            FAILED_INSTANCES="$FAILED_INSTANCES $instance"
          else
            echo "✅ $instance destroyed"
          fi
        done
        
        if [ "$INSTANCES_DESTROYED" = "true" ]; then
          echo "🎉 All instances destroyed successfully!"
          echo "DESTROY_STATUS=success" >> $GITHUB_ENV
        else
          echo "❌ FAILED: Some instances could not be destroyed:$FAILED_INSTANCES"
          echo "DESTROY_STATUS=failed" >> $GITHUB_ENV
          exit 1
        fi
        
    - name: Display removal results
      run: |
        if [ "$INFRA_EXISTS" = "false" ]; then
          echo "ℹ️  No infrastructure was found to remove"
          echo "   Nothing to do - infrastructure was already clean"
        elif [ "$DESTROY_STATUS" = "failed" ]; then
          echo "❌ REMOVAL FAILED!"
          echo "=================="
          echo ""
          echo "⚠️  Some instances could not be destroyed"
          echo "   Please check the logs above for details"
          echo ""
          echo "🔧 Troubleshooting:"
          echo "- Check if instances are protected from deletion"
          echo "- Verify permissions for gcloud compute commands"
          echo "- Try manual deletion via Google Cloud Console"
          echo ""
          echo "💡 You may need to run the remove job again"
        else
          echo "🎉 Infrastructure removed successfully!"
          echo "====================================="
          echo ""
          echo "💰 Cost Savings:"
          echo "- All compute instances destroyed"
          echo "- Static IPs preserved (no additional cost)"
          echo "- Custom images preserved (for fast deployment)"
          echo "- Ready for next deployment"
          echo ""
          echo "✅ Infrastructure ready for next deployment!"
          echo ""
          echo "🖼️ Preserved images:"
          echo "   - haproxy-prod-image-v3"
          echo "   - web1-prod-image-v3" 
          echo "   - web2-prod-image-v3"
          echo ""
          echo "🚀 Next deployment will be ultra-fast using preserved images!"
        fi