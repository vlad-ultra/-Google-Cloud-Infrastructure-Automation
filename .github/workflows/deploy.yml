name: Deploy Infrastructure

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:  # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: Authenticate to Google Cloud
      run: |
        echo "${{ secrets.GCP_SA_KEY }}" | base64 -d > /tmp/gcp-key.json
        gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Initialize Terraform
      run: |
        cd infrastructure
        terraform init
        
    - name: Plan Terraform
      run: |
        cd infrastructure
        terraform plan -out=tfplan
        
    - name: Apply Terraform
      run: |
        cd infrastructure
        terraform apply -auto-approve tfplan
        
    - name: Wait for instances to be ready
      run: |
        echo "‚è≥ Waiting for instances to be ready..."
        sleep 30
        
    - name: Apply content from web-apps
      run: |
        echo "üîÑ Applying content from web-apps/ directory..."
        
        # Function to update HTML content
        update_html_content() {
            local server_name=$1
            local html_file=$2
            local zone="europe-west1-b"
            
            echo "üìù Updating $server_name HTML content..."
            
            if [ ! -f "web-apps/$html_file" ]; then
                echo "‚ö†Ô∏è  web-apps/$html_file not found, skipping $server_name HTML update"
                return
            fi
            
            # Copy file to server
            echo "üì§ Uploading $html_file to $server_name..."
            gcloud compute scp "web-apps/$html_file" "$server_name:~/temp.html" --zone="$zone"
            
            # Apply changes on server
            gcloud compute ssh "$server_name" --zone="$zone" --command="
                echo 'üîÑ Applying HTML changes on $server_name...'
                
                # Backup current content
                sudo cp /var/www/html/index.html /var/www/html/index.html.backup.\$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
                
                # Remove old content
                sudo rm -f /var/www/html/index.html
                sudo rm -f /var/www/html/index.html.*
                
                # Copy new content
                sudo cp ~/temp.html /var/www/html/index.html
                sudo chown root:root /var/www/html/index.html
                sudo chmod 644 /var/www/html/index.html
                
                # Clean up temp file
                rm -f ~/temp.html
                
                # Restart nginx to ensure changes take effect
                sudo systemctl restart nginx
                
                echo '‚úÖ $server_name HTML updated successfully'
            "
        }
        
        # Update web1 HTML
        update_html_content "web1-prod" "web1.html"
        
        # Update web2 HTML  
        update_html_content "web2-prod" "web2.html"
        
        # Update HAProxy dashboard
        update_html_content "haproxy-prod" "haproxy.html"
        
        # Update HAProxy configuration with current IPs
        echo "üìù Updating HAProxy configuration with current IPs..."
        WEB1_INTERNAL_IP="10.132.15.221"
        WEB2_INTERNAL_IP="10.132.15.222"
        
        gcloud compute ssh haproxy-prod --zone=europe-west1-b --command="
            echo 'üîÑ Updating HAProxy configuration...'
            
            # Backup current config
            sudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup.\$(date +%Y%m%d_%H%M%S)
            
            # Update backend IPs
            sudo sed -i 's/server web1 .*:80/server web1 $WEB1_INTERNAL_IP:80/' /etc/haproxy/haproxy.cfg
            sudo sed -i 's/server web2 .*:80/server web2 $WEB2_INTERNAL_IP:80/' /etc/haproxy/haproxy.cfg
            
            # Test configuration
            if sudo haproxy -c -f /etc/haproxy/haproxy.cfg; then
                sudo systemctl restart haproxy
                echo '‚úÖ HAProxy configuration updated and restarted'
            else
                echo '‚ùå HAProxy configuration test failed, restoring backup'
                sudo cp /etc/haproxy/haproxy.cfg.backup.* /etc/haproxy/haproxy.cfg
                sudo systemctl restart haproxy
            fi
        "
        
        echo "‚úÖ Content from web-apps/ applied successfully!"
        
    - name: Test deployment
      run: |
        echo "üß™ Testing deployment..."
        
        # Get HAProxy IP
        HAPROXY_IP=$(cd infrastructure && terraform output -raw haproxy_external_ip)
        
        echo "üåê Testing Load Balancer..."
        LB_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://balancer.svdevops.tech -k || echo "000")
        if [ "$LB_RESPONSE" = "200" ]; then
            echo "‚úÖ Load Balancer working (200)"
            
            # Test load balancing - show web1-web2 alternation (fast)
            echo ""
            echo "üîÑ Testing Load Balancing (5 requests):"
            for i in {1..5}; do
                RESPONSE=$(curl -s https://balancer.svdevops.tech -k | grep -o "Web Server [12]" || echo "No response")
                echo "Request $i: $RESPONSE"
                sleep 0.2
            done
            echo "‚úÖ Load balancing test completed!"
        else
            echo "‚ö†Ô∏è  Load Balancer not ready yet ($LB_RESPONSE) - may need a few more seconds"
        fi
        
    - name: Display deployment info
      run: |
        echo "üéâ Deployment completed!"
        echo "======================="
        echo ""
        echo "üåê URLs:"
        echo "   Load Balancer: https://balancer.svdevops.tech"
        echo "   Web1: https://web1.svdevops.tech"
        echo "   Web2: https://web2.svdevops.tech"
        echo "   Stats: http://$(cd infrastructure && terraform output -raw haproxy_external_ip):8080/stats"
        echo ""
        echo "üí° All configurations are preserved from images:"
        echo "   ‚úÖ HAProxy with Let's Encrypt certificates"
        echo "   ‚úÖ Nginx with correct server_name"
        echo "   ‚úÖ Health checks enabled"
        echo "   ‚úÖ Load balancing configured"
        echo "   ‚úÖ Content from web-apps/ applied"