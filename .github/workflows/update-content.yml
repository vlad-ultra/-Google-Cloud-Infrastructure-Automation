name: 🔄 Update Content

on:
  # push:
  #   paths:
  #     - 'web-apps/**'
  #   branches: [ main, master ]
  workflow_dispatch: # Allow manual trigger only

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  GCP_REGION: europe-west1
  GCP_ZONE: europe-west1-b

jobs:
  update-content:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true
        
    - name: 🔑 Authenticate to Google Cloud
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
        gcloud auth activate-service-account --key-file=/tmp/gcp-key.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV

    - name: 🏗️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: 🔄 Update Content
      run: |
        echo "🔄 Checking if infrastructure exists..."
        
        # Check if instances exist
        if gcloud compute instances describe haproxy-prod --zone=europe-west1-b --quiet 2>/dev/null; then
          echo "✅ Infrastructure exists, updating content..."
          
          # Get FIXED internal IPs (hardcoded for reliability)
          WEB1_INTERNAL_IP="10.132.15.221"
          WEB2_INTERNAL_IP="10.132.15.222"
          
          echo "Web1 Internal IP: $WEB1_INTERNAL_IP"
          echo "Web2 Internal IP: $WEB2_INTERNAL_IP"
          
          # Update web1 HTML
          echo ""
          echo "📝 Updating Web1 HTML..."
          if [ -f "web-apps/web1.html" ]; then
            gcloud compute scp web-apps/web1.html web1-prod:~/web1.html --zone=europe-west1-b
            gcloud compute ssh web1-prod --zone=europe-west1-b --command="
              # Remove old content
              sudo rm -f /var/www/html/index.html
              sudo rm -f /var/www/html/index.html.*
              # Copy new content
              sudo cp ~/web1.html /var/www/html/index.html
              sudo chown root:root /var/www/html/index.html
              sudo chmod 644 /var/www/html/index.html
              # Clean up temp file
              rm -f ~/web1.html
              # Clear nginx cache and restart
              sudo nginx -s stop || true
              sudo systemctl start nginx
              sudo systemctl restart nginx
              echo 'Web1 updated successfully - old content removed'
            "
            echo "✅ Web1 content updated"
          else
            echo "⚠️ web-apps/web1.html not found, skipping Web1 HTML update"
          fi
          
          # Update web2 HTML
          echo "📝 Updating Web2 HTML..."
          if [ -f "web-apps/web2.html" ]; then
            gcloud compute scp web-apps/web2.html web2-prod:~/web2.html --zone=europe-west1-b
            gcloud compute ssh web2-prod --zone=europe-west1-b --command="
              # Remove old content
              sudo rm -f /var/www/html/index.html
              sudo rm -f /var/www/html/index.html.*
              # Copy new content
              sudo cp ~/web2.html /var/www/html/index.html
              sudo chown root:root /var/www/html/index.html
              sudo chmod 644 /var/www/html/index.html
              # Clean up temp file
              rm -f ~/web2.html
              # Clear nginx cache and restart
              sudo nginx -s stop || true
              sudo systemctl start nginx
              sudo systemctl restart nginx
              echo 'Web2 updated successfully - old content removed'
            "
            echo "✅ Web2 content updated"
          else
            echo "⚠️ web-apps/web2.html not found, skipping Web2 HTML update"
          fi
          
          # Update HAProxy configuration with FIXED internal IPs
          echo "📝 Updating HAProxy configuration with FIXED internal IPs..."
          gcloud compute ssh haproxy-prod --zone=europe-west1-b --command="
            # Update HAProxy config with FIXED internal IPs
            sudo sed -i 's/server web1 .*:80/server web1 $WEB1_INTERNAL_IP:80/' /etc/haproxy/haproxy.cfg
            sudo sed -i 's/server web2 .*:80/server web2 $WEB2_INTERNAL_IP:80/' /etc/haproxy/haproxy.cfg
            sudo systemctl restart haproxy
            echo 'HAProxy configuration updated with FIXED internal IPs'
          "
          
          # Update HAProxy dashboard
          echo "📝 Updating HAProxy dashboard..."
          if [ -f "web-apps/haproxy.html" ]; then
            gcloud compute scp web-apps/haproxy.html haproxy-prod:~/haproxy.html --zone=europe-west1-b
            gcloud compute ssh haproxy-prod --zone=europe-west1-b --command="
              # Remove old content
              sudo rm -f /var/www/html/index.html
              sudo rm -f /var/www/html/index.html.*
              # Copy new content
              sudo cp ~/haproxy.html /var/www/html/index.html
              sudo chown root:root /var/www/html/index.html
              sudo chmod 644 /var/www/html/index.html
              # Clean up temp file
              rm -f ~/haproxy.html
              # Clear nginx cache and restart
              sudo nginx -s stop || true
              sudo systemctl start nginx
              sudo systemctl restart nginx
              echo 'HAProxy dashboard updated successfully - old content removed'
            "
            echo "✅ HAProxy content updated"
          else
            echo "⚠️ web-apps/haproxy.html not found, skipping HAProxy dashboard update"
          fi
          
          echo ""
          echo "✅ All content updated successfully with FIXED internal IPs!"
          echo "🌐 Check your load balancer: https://balancer.svdevops.tech"
        else
          echo "⚠️ Infrastructure not found, skipping content update"
          echo "Run deploy workflow first to create infrastructure"
          exit 0
        fi

    - name: 🧪 Test Content Update
      run: |
        echo "🧪 Testing content update..."
        
        # Check if infrastructure exists before testing
        if gcloud compute instances describe haproxy-prod --zone=europe-west1-b --quiet 2>/dev/null; then
          echo "✅ Infrastructure exists, testing domains..."
          
          # Wait for content to be updated
          sleep 30
          
          # Test all domains
          echo "Testing Load Balancer (Roundrobin):"
          curl -f https://balancer.svdevops.tech || echo "⚠️ Load balancer test failed"
          
          echo "Testing Web1 (Direct):"
          curl -f https://web1.svdevops.tech || echo "⚠️ Web1 test failed"
          
          echo "Testing Web2 (Direct):"
          curl -f https://web2.svdevops.tech || echo "⚠️ Web2 test failed"
          
          # Test roundrobin with new content
          echo "Testing Roundrobin with updated content:"
          for i in {1..3}; do
            echo "Request $i:"
            curl -s https://balancer.svdevops.tech | grep -E "(Web Server|title)" | head -1
          done
        else
          echo "⚠️ Infrastructure not found, skipping tests"
        fi

    - name: 📊 Content Update Summary
      run: |
        echo "## 🔄 Content Updated Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 Updated Files:" >> $GITHUB_STEP_SUMMARY
        echo "- web-apps/web1.html" >> $GITHUB_STEP_SUMMARY
        echo "- web-apps/web2.html" >> $GITHUB_STEP_SUMMARY
        echo "- web-apps/haproxy.html" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Updated URLs:" >> $GITHUB_STEP_SUMMARY
        echo "- **Load Balancer (Roundrobin):** https://balancer.svdevops.tech" >> $GITHUB_STEP_SUMMARY
        echo "- **Web Server 1 (Direct):** https://web1.svdevops.tech" >> $GITHUB_STEP_SUMMARY
        echo "- **Web Server 2 (Direct):** https://web2.svdevops.tech" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Verification:" >> $GITHUB_STEP_SUMMARY
        echo "- All domains tested successfully" >> $GITHUB_STEP_SUMMARY
        echo "- Roundrobin working correctly" >> $GITHUB_STEP_SUMMARY
        echo "- Content updated on all servers" >> $GITHUB_STEP_SUMMARY
